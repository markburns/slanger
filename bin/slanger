#!/usr/bin/env ruby
# encoding: utf-8

require 'optparse'
require 'bundler/setup'
require 'eventmachine'

options = {
  api_host: '0.0.0.0',
  api_port: '4567',
  websocket_host: '0.0.0.0',
  websocket_port: '8080',
  verbose: false,
  redis_address: 'redis://0.0.0.0:6379/0'
}

if ENV["DEBUGGER"]=="true"
  puts "debugger enabled"
  require "byebug"
end

OptionParser.new do |opts|
  opts.on '-h', '--help', 'Display this screen' do
    puts opts
    exit
  end

  opts.on '-k', '--app_key APP_KEY', "Pusher application key. This parameter is required." do |k|
    options[:app_key] = k
  end

  opts.on '-s', '--secret SECRET', "Pusher application secret. This parameter is required." do |k|
    options[:secret] = k
  end

  opts.on '-r', '--redis_address URL', "Address to bind to (Default: redis://127.0.0.1:6379/0)" do |h|
    options[:redis_address] = h
  end

  opts.on '-a', '--api_host HOST', "API service address (Default: 0.0.0.0:4567)" do |p|
    options[:api_host], options[:api_port] = p.split(':')
  end

  opts.on '-w', '--websocket_host HOST', "WebSocket service address (Default: 0.0.0.0:8080)" do |p|
    options[:websocket_host], options[:websocket_port] = p.split(':')
  end

  opts.on '-i', '--require FILE', "Require a file before starting Slanger" do |p|
    options[:require] ||= []
    options[:require] << p
  end

  opts.on '-p', '--private_key_file FILE', "Private key file for SSL transport" do |p|
    options[:tls_options] ||= {}
    options[:tls_options][:private_key_file] = p
  end

  opts.on '-b', '--webhook_url URL', "Callback URL for webhooks" do |p|
    options[:webhook_url] = p
  end

  opts.on '-c', '--cert_file FILE', "Certificate file for SSL transport" do |p|
    options[:tls_options] ||= {}
    options[:tls_options][:cert_chain_file] = p
  end

  opts.on "-v", "--[no-]verbose", "Run verbosely" do |v|
    options[:verbose] = v
  end

  opts.on "-t" "--activity_timeout", "Activity (ping-pong) Timeout" do |t|
    options[:activity_timeout] = t
  end

  opts.on '--pid_file PIDFILE', "The Slanger process ID file name." do |k|
    options[:pid_file] = k
  end

  opts.on '--log_file LOGFILE', "The log file for slanger output. Defaults to STDOUT" do |l|
    options[:log_file] = l
  end

  opts.on '--log_level LEVEL', "The log level for slanger. Defaults to INFO" do |l|
    options[:log_level] = l
  end


  opts.parse!

  %w<app_key secret>.each do |parameter|
    unless options[parameter.to_sym]
      puts "--#{parameter} STRING is a required argument. Use your Pusher #{parameter}.\n"
      puts opts
      exit
    end
  end
end



if options[:tls_options]
  [:cert_chain_file, :private_key_file].each do |param|
    raise RuntimeError.new "--#{param} does not exist at `#{options[:tls_options][param]}`" unless File.exists? options[:tls_options][param]
    raise RuntimeError.new "Both --cert_file and --private_key_file need to be specified" unless options[:tls_options][param]
  end
end

STDOUT.sync = true

EM.epoll
EM.kqueue


EM.run do
  File.tap { |f| require f.expand_path(f.join(f.dirname(__FILE__),'..', 'slanger.rb')) }
  #force autoload
  Slanger::Logger

  log_file  = options[:log_file]  || STDOUT
  log_level = options[:log_level] || Logger::INFO

  Slanger.logger = Logger.new log_file
  Slanger.log_level = log_level

  Slanger::Config.load options

  %w(INT HUP).each do |s|
    Signal.trap(s) { 
      Slanger.info "Trapped signal #{s}"
      Slanger.info "Stopping slanger"
      Slanger::Service.stop 
    }
  end

  Slanger::Service.run

  Slanger.info <<-LOGO

      .d8888b.  888
     d88P  Y88b 888
     Y88b.      888
      "Y888b.   888  8888b.  88888b.   .d88b.   .d88b.  888d888
         "Y88b. 888     "88b 888 "88b d88P"88b d8P  Y8b 888P"
           "888 888 .d888888 888  888 888  888 88888888 888
     Y88b  d88P 888 888  888 888  888 Y88b 888 Y8b.     888
      "Y8888P"  888 "Y888888 888  888  "Y88888  "Y8888  888
                                           888
                                      Y8b d88P
                                      "Y88P"
  LOGO

  Slanger.info "Running Slanger v.#{Slanger::VERSION}"
  Slanger.info "\n"

  Slanger.info "API server       listening on port #{options[:api_port]}"
  Slanger.info "WebSocket server listening on port #{options[:websocket_port]}"
end
